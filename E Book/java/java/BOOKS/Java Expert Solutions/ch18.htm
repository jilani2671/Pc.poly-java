<HTML>
<HEAD>
<TITLE>Chapter 18 -- Using CORBA IDL with Java</TITLE>

<META>
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">
<H1><FONT SIZE=6 COLOR=#FF0000>Chapter&nbsp;18</FONT></H1>
<H1><FONT SIZE=6 COLOR=#FF0000>Using CORBA IDL with Java</FONT>
</H1>
<P>
<I><B>By Mark Wutka</B></I>
<HR>
<P>
<CENTER><B><FONT SIZE=5><A NAME="CONTENTS">CONTENTS</A></FONT></B></CENTER>
<UL>
<LI><A HREF="#WhatIsCORBA">
What Is CORBA?</A>
<LI><A HREF="#SunsIDLtoJavaMapping">
Sun's IDL to Java Mapping</A>
<UL>
<LI><A HREF="#IDLModules">
IDL Modules</A>
<LI><A HREF="#IDLConstants">
IDL Constants</A>
<LI><A HREF="#IDLDataTypes">
IDL Data Types</A>
<LI><A HREF="#EnumeratedTypes">
Enumerated Types</A>
</UL>
<LI><A HREF="#Structures">
Structures</A>
<UL>
<LI><A HREF="#Unions">
 Unions</A>
<LI><A HREF="#SequencesandArrays">
Sequences and Arrays</A>
<LI><A HREF="#Exceptions">
Exceptions</A>
<LI><A HREF="#Interfaces">
Interfaces</A>
<LI><A HREF="#Attributes">
Attributes</A>
</UL>
<LI><A HREF="#UsingCORBAinApplets">
Using CORBA in Applets</A>
<UL>
<LI><A HREF="#ChoosingBetweenCORBAandRMI">
Choosing Between CORBA and RMI</A>
</UL>
<LI><A HREF="#CreatingCORBAClientswithJavaIDL">
Creating CORBA Clients with JavaIDL</A>
<LI><A HREF="#CreatingCORBAClientswithVisiBroker">
Creating CORBA Clients with VisiBroker</A>
</UL>

<HR>
<H2><A NAME="WhatIsCORBA"><FONT SIZE=5 COLOR=#FF0000>
What Is CORBA?</FONT></A></H2>
<P>
In <A HREF="ch17.htm" >Chapter 17</A>, &quot;Creating CORBA Clients,&quot; you learned
how to create a CORBA client using the OrbixWeb client. If this
is your first exposure to CORBA, you may not realize what CORBA
actually is.
<P>
The Common Object Request Broker Architecture (CORBA) is a tremendous
vision of distributed objects interacting without regard to their
location or operating environment. CORBA is still in its infancy,
with some standards still in the definition stage, but the bulk
of the CORBA infrastructure is defined. Many software vendors
are still working on some of the features that have been defined.
<P>
CORBA consists of several layers. The lowest layer is the Object
Request Broker, or ORB. The ORB is essentially a remote method
invocation facility. The ORB is language-neutral, meaning you
can create objects in any language and use the ORB to invoke methods
in those objects. You can also use any language to create clients
that invoke remote methods through the ORB. There is a catch to
the &quot;any language&quot; idea. You have to define a language
mapping between the implementation language and CORBA's Interface
Definition Language (IDL).
<P>
When you go from IDL to your implementation language, you generate
a stub and a skeleton in the implementation language. The stub
is the interface between the client and the ORB; the skeleton
is the interface between the ORB and the object (or server). Figure
18.1 shows the relationship between the ORB, an object, and a
client wishing to invoke a method on the object.
<P>
<A HREF="f18-1.gif"><B>Figure 18.1 : </B><I>COBRA clients use the ORB to invoke methods
on a COBRA server</I>.</A>
<P>
While the ORB is drawn conceptually as a separate part of the
architecture, it is often just part of the application. A basic
ORB implementation might include a naming service (see the following
discussion) and a set of libraries that facilitate communications
between clients and servers. Once a client locates a server, it
communicates directly with that server, not going through any
intermediate program. This permits efficient CORBA implementations.
<P>
The ORB is both the most visible portion of CORBA and the least
exciting. CORBA's big benefit comes in all the services that it
defines. Among the services defined in CORBA are
<UL>
<LI>Lifecycle
<LI>Naming
<LI>Persistence
<LI>Events
<LI>Transactions
<LI>Querying
<LI>Properties
</UL>
<P>
These services are a subset of the full range of services defined
by CORBA. The Lifecycle and the Naming services crystallize Sun's
visionary phrase, &quot;The network is the computer.&quot; These
services allow you to instantiate (create) new objects without
knowing where the objects reside. You might be creating an object
in your own program space, or you might be creating an object
halfway around the world, and your program will never know it.
<P>
The Lifecycle service enables you to create, delete, copy, and
move objects on a specific system. As an application programmer,
you would prefer not to know where an object resides. As a systems
programmer, you need the Lifecycle service to implement this location
transparency for the application programmer. One of the hassles
you frequently run into in remote procedure call systems is that
the server you are calling must already be up and running before
you can make the call. The Lifecycle service removes that hassle;
you can create an object, if you need to, before invoking a method
on it.
<P>
The Naming service enables you to locate an object on the network
by name. You want the total flexibility of being able to move
objects around the network without having to change any code.
The Naming service gives you that ability by associating an object
with a name instead of a network address.
<P>
The Persistence service lets you save objects somewhere and retrieve
them later. This might be in a file, or it might be on an object
database. The CORBA standard doesn't specify which. That is left
up to the individual software vendors.
<P>
The Event service is a messaging system that allows more complex
interaction than a simple message call. You could use the Event
service to implement a network-based Observer-Observable model,
for instance. There are event suppliers that send events, and
event consumers that receive them. A server or a client is either
push or pull. A push server sends events out when it wants to
(it pushes them out), while a push client has a push method and
automatically receives events through this method. A pull server
doesn't send out events until it is asked; you have to pull them
out of the server. A pull client does not receive events until
it asks for them. It might help to use the term poll in place
of pull. A pull server doesn't deliver events on its own; it gives
them out when it is polled. A pull client goes out and polls for
events.
<P>
The Transaction service is one of the most complex services in
the CORBA architecture. It enables you to define operations across
multiple objects as a single transaction. This kind of transaction
is similar to a database transaction. It handles concurrency,
locking, and even rollbacks in case of a failure. A transaction
must comply with a core set of requirements that are abbreviated
ACID:
<UL>
<LI>Atomicity&nbsp;&nbsp;A transaction is a single event. Everything
in the transaction is either done as a whole or undone. You don't
perform a transaction partially.
<LI>Consistency&nbsp;&nbsp;When you perform a transaction, you
do not leave the system in an inconsistent state. For example,
if you have an airline flight with one seat left, you don't end
up assigning that seat to two different people if their transactions
occur at the same time.
<LI>Isolation&nbsp;&nbsp;No other objects see the results of a
transaction until that transaction is committed. Even if transactions
are executing simultaneously, they have a sequential order with
respect to the data.
<LI>Durability&nbsp;&nbsp;If you commit a transaction, you can
be sure that the change has been made and stored somewhere. It
doesn't get lost.
</UL>
<P>
The transaction service usually relies on an external Transaction
Processing (TP) system.
<P>
The Object Querying service lets you locate objects based on something
other than name. For instance, you could locate all ships registered
in Liberia, or all Krispy Kreme donut locations in Georgia. This
feature is usually used when your objects are stored in an object
database.
<P>
The Properties service lets objects store information on other
objects. A property is like a sticky-note. An object writes some
information down on a sticky-note and slaps it on another object.
This has tremendous potential because it lets information be associated
with an object without the object having to know about it.
<P>
The beauty of the whole CORBA system is that all of these services
are available through the ORB interface, so once your program
can talk to the ORB, you have these services available. Of course,
your ORB vendor may not have implemented all of these services
yet.
<H2><A NAME="SunsIDLtoJavaMapping"><FONT SIZE=5 COLOR=#FF0000>
Sun's IDL to Java Mapping</FONT></A></H2>
<P>
In order to use Java in a CORBA system, you need a standard way
to convert attributes and methods defined in IDL into Java attributes
and methods. Sun has proposed a mapping and released a program
to generate Java stubs and skeletons from an IDL definition.
<P>
Defining interfaces in IDL is similar to defining interfaces in
Java, since you are defining only the signatures (parameters and
return values) of the methods and not the implementation of the
methods.
<H3><A NAME="IDLModules">
IDL Modules</A></H3>
<P>
A module is the IDL equivalent of the Java package. It groups
sets of interfaces together in their own namespace. Like Java
packages, IDL modules can be nested.
<P>
Here is an example IDL module definition (shown without any definitions,
which are discussed later in this chapter):
<BLOCKQUOTE>
<PRE>
module MyModule {
     // insert your IDL definitions here, you must have at least
     // one definition for a valid IDL module
};
</PRE>
</BLOCKQUOTE>
<P>
This module would be generated in Java as a package called <TT>MyModule</TT>:
<BLOCKQUOTE>
<PRE>
package MyModule;
</PRE>
</BLOCKQUOTE>
<P>
When you nest modules, the Java packages you generate are also
nested. For example, consider the following nested module definition:
<BLOCKQUOTE>
<PRE>
module foo {
     module bar {
          module baz {
// insert definitions here
          };
     };
};<BR>
</PRE>
</BLOCKQUOTE>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Tip</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
Don't forget to put a semicolon (;) after the closing brace (}) of a module definition. Unlike Java, C, and C++, you are <I><FONT FACE="Times New Roman Italic">required </FONT></I>to put a semicolon after the brace in IDL.
</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<P>
The Java package definition for interfaces within the <TT>baz</TT>
module is
<BLOCKQUOTE>
<PRE>
package foo.bar.baz;
</PRE>
</BLOCKQUOTE>
<H3><A NAME="IDLConstants">
IDL Constants</A></H3>
<P>
As in Java, you can define constant values in IDL. The format
of an IDL constant definition is
<BLOCKQUOTE>
<PRE>
const <I>type</I> <I>variable</I> = <I>value</I>;
</PRE>
</BLOCKQUOTE>
<P>
The type of a constant is limited to <TT>boolean</TT>,
<TT>char</TT>, <TT>short</TT>,
<TT>unsigned short</TT>, <TT>long</TT>,
<TT>unsigned long</TT>, <TT>float</TT>,
<TT>double</TT>, and <TT>string</TT>.
<P>
Constants are mapped into Java in an unusual way. Each constant
is defined as a class with a single, static, final, public variable,
called <TT>value,</TT> that holds
the value of the constant. This is done because IDL lets you define
constants within a module, but Java <BR>
requires that constants belong to a class.
<P>
Here is an example IDL constant definition:
<BLOCKQUOTE>
<PRE>
module ConstExample {
     const long myConstant = 123;
};
</PRE>
</BLOCKQUOTE>
<P>
This IDL definition produces the following Java definition:
<BLOCKQUOTE>
<PRE>
package ConstExample;
public final class myConstant {
     public static final int value = (int) (123L);
}
</PRE>
</BLOCKQUOTE>
<H3><A NAME="IDLDataTypes">
IDL Data Types</A></H3>
<P>
IDL has roughly the same set of primitive data types as Java except
for a few exceptions:
<UL>
<LI>The IDL equivalent of the Java <TT>byte</TT>
data type is the <TT>octet</TT>.
<LI>IDL supports the <TT>String</TT>
type, but it is called <TT>string</TT>.
<LI>Characters in IDL can only have values between 0 and 255.
The JavaIDL system checks your characters to make sure they fall
within this range, including characters stored in strings.
<LI>IDL supports 16, 32, and 64-bit integers, but the names for
the 32 and 64-bit types are slightly different. In IDL, the 32-bit
value is called a <TT>long</TT>, while
in Java it is called an <TT>int</TT>.
The IDL equivalent of the Java <TT>long</TT>
is the <TT>long long</TT>.
<LI>IDL supports unsigned <TT>short</TT>,
<TT>int</TT>, and <TT>long</TT>
values. In Java, these values are stored in signed variables.
You must be very careful when dealing with large unsigned values,
since they may end up negative when represented in Java.
</UL>
<H3><A NAME="EnumeratedTypes">
Enumerated Types</A></H3>
<P>
Unlike Java, IDL lets you create enumerated types that represent
integer values. The JavaIDL system turns the enumerated type into
a class with public, static, final values.
<P>
Here is an example IDL enumerated type:
<BLOCKQUOTE>
<PRE>
module EnumModule {
     enum Medals { gold, silver, bronze };
};
</PRE>
</BLOCKQUOTE>
<P>
This definition produces the Java class shown in Listing 18.1:
<HR>
<BLOCKQUOTE>
<B>Listing 18.1&nbsp;&nbsp;Java Definition of Enumerated Types
<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
package EnumModule;
public class Medals {
 public static final int gold = 0,
                silver = 1,
                bronze = 2;
 public static final int narrow(int i) throws sunw.corba.EnumerationRangeException {
     if (gold &lt;= i &amp;&amp; i &lt;= bronze) {
      return i;
     }
     throw new sunw.corba.EnumerationRangeException();
 }
}
</PRE>
</BLOCKQUOTE>
<HR>
<P>
Since you can also declare variables of an enumerated type, JavaIDL
creates a holder class that is used in place of the data type.
The holder class contains a single instance variable called <TT>value</TT>
that holds the enumerated value. The holder for the <TT>Medals</TT>
enumeration looks like the definition in Listing 18.2:
<HR>
<BLOCKQUOTE>
<B>Listing 18.2&nbsp;&nbsp;Java Definition of Holder Class for
Enumerated Types<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
package EnumModule;
public class MedalsHolder
{
 //     instance variable
 public int value;
 //     constructors
 public MedalsHolder() {
     this(0);
 }
 public MedalsHolder(int __arg) {
     value = EnumModule.Medals.narrow(__arg);
 }
}
</PRE>
</BLOCKQUOTE>
<HR>
<P>
You can create a <TT>MedalsHolder</TT>
by passing an enumerated value to the constructor:
<BLOCKQUOTE>
<PRE>
MedalsHolder medal = new MedalsHolder(Medals.silver);
</PRE>
</BLOCKQUOTE>
<P>
The <TT>narrow</TT> method performs
range checking on values and throws an exception if the argument
is outside the bounds of the enumeration. It returns the value
passed to it, so you can use it to perform passive bounds checking.
For example:
<BLOCKQUOTE>
<PRE>
int x = Medals.narrow(y);
</PRE>
</BLOCKQUOTE>
<P>
assigns y to x only if y is in the range of enumerated values
for <TT>Medals</TT>, otherwise it
throws an exception.
<H2><A NAME="Structures"><FONT SIZE=5 COLOR=#FF0000>
Structures</FONT></A></H2>
<P>
An IDL struct is like a Java class without methods. In fact, JavaIDL
converts an IDL struct into a Java class whose only methods are
a null constructor and a constructor that takes all the structure's
attributes.
<P>
Here is an example IDL struct definition:
<BLOCKQUOTE>
<PRE>
module StructModule {
     struct Person {
          string name;
          long age;
     };
};
</PRE>
</BLOCKQUOTE>
<P>
This definition produces the Java class declaration shown in Listing
18.3 (with some JavaIDL-specific methods omitted):
<HR>
<BLOCKQUOTE>
<B>Listing 18.3&nbsp;&nbsp;Java Definition of IDL Struct<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
package StructModule;
public final class Person {
 //     instance variables
 public String name;
 public int age;
 //     constructors
 public Person() { }
 public Person(String __name, int __age) {
     name = __name;
     age = __age;
 }
}
</PRE>
</BLOCKQUOTE>
<HR>
<P>
Like the enumerated type, a struct also produces a holder class
that represents the structure. The holder class contains a single
instance variable called <TT>value</TT>.
Listing 18.4 shows the holder for the <TT>Person</TT>
structure:
<HR>
<BLOCKQUOTE>
<B>Listing 18.4&nbsp;&nbsp;Java Definition of Holder Class for
IDL Struct<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
package StructModule;
public final class PersonHolder
{
 //     instance variable
 public StructModule.Person value;
 //     constructors
 public PersonHolder() {
     this(null);
 }
 public PersonHolder(StructModule.Person __arg) {
     v